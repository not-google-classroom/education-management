package com.org.education_management.util;


import com.org.education_management.model.Column;
import com.org.education_management.model.ForeignKey;
import com.org.education_management.model.IndexKey;
import com.org.education_management.model.PrimaryKey;
import com.org.education_management.model.Table;
import com.org.education_management.model.UniqueKey;

public class SQLGenerator {

    public String generateCreateTableSQL(Table table) throws Exception {
        StringBuilder sql = new StringBuilder("CREATE TABLE IF NOT EXISTS ");
        sql.append(table.getTableName()).append(" (");

        // Process columns
        for (Column column : table.getColumns()) {
            sql.append(column.getName()).append(" ").append(column.getType());

            if (Boolean.TRUE.equals(column.getAutoIncrement())) {
                sql.append(" GENERATED BY DEFAULT AS IDENTITY");
            }

            if (Boolean.TRUE.equals(column.getNotNull())) {
                sql.append(" NOT NULL");
            }

            if (column.getDefaultValue() != null) {
                if (column.getType().toLowerCase().contains("varchar") || column.getType().equalsIgnoreCase("text")) {
                    sql.append(" DEFAULT '").append(column.getDefaultValue()).append("'");
                } else {
                    sql.append(" DEFAULT ").append(column.getDefaultValue());
                }
            }

            sql.append(", ");
        }

        // Process Primary Keys
        PrimaryKey primaryKey = table.getPrimaryKey();
        if (primaryKey != null) {
            sql.append("CONSTRAINT ").append(primaryKey.getPkName())
                    .append(" PRIMARY KEY (")
                    .append(String.join(", ", primaryKey.getPkColumns()))
                    .append("), ");
        }

        // Process Unique Keys
        UniqueKey uniqueKey = table.getUniqueKey();
        if (uniqueKey != null) {
            sql.append("CONSTRAINT ").append(uniqueKey.getUkName())
                    .append(" UNIQUE (")
                    .append(String.join(", ", uniqueKey.getUkColumns()))
                    .append("), ");
        }

        // Process Foreign Keys
        for (Column column : table.getColumns()) {
            if (column.getForeignKey() != null) {
                ForeignKey fk = column.getForeignKey();
                if(fk.getFkName() != null && !fk.getFkName().isEmpty()) {
                    sql.append("CONSTRAINT ").append(fk.getFkName())
                            .append(" FOREIGN KEY (").append(column.getName()).append(") REFERENCES ")
                            .append(fk.getReferencedTable()).append("(").append(fk.getReferencedColumn()).append(")");

                    if (fk.getOnDelete() != null) {
                        sql.append(" ON DELETE ").append(fk.getOnDelete());
                    }
                    sql.append(", ");
                } else {
                    throw new Exception(String.format("fkName is empty for table: %s and column: %s", table.getTableName(), column.getName()));
                }
            }
        }

        // Remove the last comma and space
        sql.setLength(sql.length() - 2);
        sql.append(");");

        // Add Index Keys (non-constraint)
        StringBuilder indexSQL = new StringBuilder();
        IndexKey indexKey = table.getIndexKey();
        if (indexKey != null) {
            indexSQL.append("CREATE INDEX IF NOT EXISTS ").append(indexKey.getIkName())
                    .append(" ON ").append(table.getTableName())
                    .append(" (").append(String.join(", ", indexKey.getIkColumns())).append("); ");
        }

        // Combine Table SQL and Index SQL
        return sql.append(" ").append(indexSQL).toString();
    }
}